import {
  prop,
  getModelForClass,
  Ref,
  index,
  Severity,
  modelOptions,
} from "@typegoose/typegoose";
import { Schema, Types } from "mongoose";

// ===== ENUMS =====
export enum UserProjectRole {
  OWNER = "OWNER",
  EDITOR = "EDITOR",
}

export enum MessageRole {
  USER = "USER",
  ASSISTANT = "ASSISTANT",
}

export enum ProcessingStatus {
  IN_PROGRESS = "IN_PROGRESS",
  READY = "READY",
}

export enum EntityStatus {
  ACTIVE = "ACTIVE",
  DISABLED = "DISABLED",
}

// ===== MODELS =====

@index({ email: 1 }, { unique: true })
export class User {
  // _id is automatically generated by MongoDB

  @prop({ required: true })
  public name!: string;

  @prop({ required: true })
  public surname!: string;

  @prop({ required: true })
  public email!: string;

  @prop({ required: true })
  public password!: string;

  @prop({ enum: EntityStatus, default: EntityStatus.ACTIVE })
  public status!: EntityStatus;

  // Timestamps handled automatically by mongoose
  public created_at?: Date;
  public updated_at?: Date;

  // Virtual relations
  public user_projects?: UserProject[];
  public sessions?: Session[];
}

export class Project {
  // _id is automatically generated by MongoDB

  @prop({ required: true })
  public title!: string;

  @prop()
  public logo?: string;

  @prop({ enum: EntityStatus, default: EntityStatus.ACTIVE })
  public status!: EntityStatus;

  // Timestamps handled automatically by mongoose
  public created_at?: Date;
  public updated_at?: Date;

  // Virtual relations
  public user_projects?: UserProject[];
  public project_limits?: ProjectLimit;
  public bot?: Bot;
}

@index({ user_id: 1, project_id: 1 }, { unique: true })
export class UserProject {
  // _id is automatically generated by MongoDB

  @prop({ required: true, ref: () => User })
  public user_id!: Ref<User>;

  @prop({ required: true, ref: () => Project })
  public project_id!: Ref<Project>;

  @prop({ enum: UserProjectRole, required: true })
  public role!: UserProjectRole;

  @prop({ enum: EntityStatus, default: EntityStatus.ACTIVE })
  public status!: EntityStatus;

  // Timestamps handled automatically by mongoose
  public created_at?: Date;
  public updated_at?: Date;

  // Relations
  public user?: User;
  public project?: Project;
}

@index({ project_id: 1 }, { unique: true })
export class ProjectLimit {
  // _id is automatically generated by MongoDB

  @prop({ required: true, ref: () => Project })
  public project_id!: Ref<Project>;

  @prop({ required: true })
  public remaining_faq_questions!: number;

  @prop({ required: true })
  public remaining_documents!: number;

  @prop({ required: true })
  public remaining_live_interactions!: number;

  @prop({ required: true })
  public remaining_users_count!: number;

  // Timestamps handled automatically by mongoose
  public created_at?: Date;
  public updated_at?: Date;

  // Relations
  public project?: Project;
}

@index({ project_id: 1 }, { unique: true })
export class Bot {
  // _id is automatically generated by MongoDB

  @prop({ required: true, ref: () => Project })
  public project_id!: Ref<Project>;

  @prop({ enum: EntityStatus, default: EntityStatus.ACTIVE })
  public status!: EntityStatus;

  // Timestamps handled automatically by mongoose
  public created_at?: Date;
  public updated_at?: Date;

  // Virtual relations
  public project?: Project;
  public bot_config?: BotConfig;
  public sessions?: Session[];
  public faq_questions?: FaqQuestion[];
  public documents?: Document[];
  public live_interactions?: LiveInteraction[];
}

@index({ bot_id: 1 }, { unique: true })
export class BotConfig {
  // _id is automatically generated by MongoDB

  @prop({ required: true, ref: () => Bot })
  public bot_id!: Ref<Bot>;

  @prop({ required: true })
  public name!: string;

  @prop({ required: true })
  public description!: string;

  @prop({ required: true })
  public welcome_message!: string;

  @prop()
  public personality_prompt?: string;

  @prop()
  public avatar?: string;

  // Relations
  public bot?: Bot;
}

export class Session {
  // _id is automatically generated by MongoDB

  @prop({ required: true, ref: () => User })
  public user_id!: Ref<User>;

  @prop({ required: true, ref: () => Bot })
  public bot_id!: Ref<Bot>;

  @prop({ enum: EntityStatus, default: EntityStatus.ACTIVE })
  public status!: EntityStatus;

  // Timestamps handled automatically by mongoose
  public created_at?: Date;
  public updated_at?: Date;

  // Virtual relations
  public user?: User;
  public bot?: Bot;
  public messages?: Message[];
}

export class Message {
  // _id is automatically generated by MongoDB

  @prop({ required: true, ref: () => Session })
  public session_id!: Ref<Session>;

  @prop({ enum: MessageRole, required: true })
  public role!: MessageRole;

  @prop({ required: true })
  public content!: string;

  @prop({ default: true })
  public is_visible!: boolean;

  @prop({ enum: EntityStatus, default: EntityStatus.ACTIVE })
  public status!: EntityStatus;

  // Timestamps handled automatically by mongoose
  public created_at?: Date;
  public updated_at?: Date;

  // Relations
  public session?: Session;
}

export class FaqQuestion {
  // _id is automatically generated by MongoDB

  @prop({ required: true, ref: () => Bot })
  public bot_id!: Ref<Bot>;

  @prop({ required: true })
  public question!: string;

  @prop({ required: true })
  public answer!: string;

  @prop({ enum: ProcessingStatus, default: ProcessingStatus.IN_PROGRESS })
  public embedding_status!: ProcessingStatus;

  @prop()
  public embedding?: string;

  @prop({ enum: EntityStatus, default: EntityStatus.ACTIVE })
  public status!: EntityStatus;

  // Timestamps handled automatically by mongoose
  public created_at?: Date;
  public updated_at?: Date;

  // Relations
  public bot?: Bot;
}

export class Document {
  // _id is automatically generated by MongoDB

  @prop({ required: true, ref: () => Bot })
  public bot_id!: Ref<Bot>;

  @prop({ required: true })
  public title!: string;

  @prop({ required: true })
  public file_url!: string;

  @prop({ enum: ProcessingStatus, default: ProcessingStatus.IN_PROGRESS })
  public embedding_status!: ProcessingStatus;

  @prop({ enum: EntityStatus, default: EntityStatus.ACTIVE })
  public status!: EntityStatus;

  // Timestamps handled automatically by mongoose
  public created_at?: Date;
  public updated_at?: Date;

  // Virtual relations
  public bot?: Bot;
  public document_chunks?: DocumentChunk[];
}

export class DocumentChunk {
  // _id is automatically generated by MongoDB

  @prop({ required: true, ref: () => Document })
  public document_id!: Ref<Document>;

  @prop({ required: true })
  public chunk_index!: number;

  @prop({ required: true })
  public chunk_text!: string;

  @prop()
  public embedding?: string;

  @prop({ enum: EntityStatus, default: EntityStatus.ACTIVE })
  public status!: EntityStatus;

  // Timestamps handled automatically by mongoose
  public created_at?: Date;
  public updated_at?: Date;

  // Relations
  public document?: Document;
}

@modelOptions({ options: { allowMixed: Severity.ALLOW } })
export class LiveInteraction {
  // _id is automatically generated by MongoDB

  @prop({ required: true, ref: () => Bot })
  public bot_id!: Ref<Bot>;

  @prop({ type: Schema.Types.Mixed })
  public interaction?: any;

  @prop({ type: Schema.Types.Mixed })
  public results?: any;

  @prop({ enum: EntityStatus, default: EntityStatus.ACTIVE })
  public status!: EntityStatus;

  // Timestamps handled automatically by mongoose
  public created_at?: Date;
  public updated_at?: Date;

  // Relations
  public bot?: Bot;
}

// ===== MODEL EXPORTS =====
export const UserModel = getModelForClass(User, {
  schemaOptions: {
    collection: "users",
    timestamps: { createdAt: "created_at", updatedAt: "updated_at" },
  },
});

export const ProjectModel = getModelForClass(Project, {
  schemaOptions: {
    collection: "projects",
    timestamps: { createdAt: "created_at", updatedAt: "updated_at" },
  },
});

export const UserProjectModel = getModelForClass(UserProject, {
  schemaOptions: {
    collection: "user_projects",
    timestamps: { createdAt: "created_at", updatedAt: "updated_at" },
  },
});

export const ProjectLimitModel = getModelForClass(ProjectLimit, {
  schemaOptions: {
    collection: "project_limits",
    timestamps: { createdAt: "created_at", updatedAt: "updated_at" },
  },
});

export const BotModel = getModelForClass(Bot, {
  schemaOptions: {
    collection: "bots",
    timestamps: { createdAt: "created_at", updatedAt: "updated_at" },
  },
});

export const BotConfigModel = getModelForClass(BotConfig, {
  schemaOptions: {
    collection: "bot_configs",
    timestamps: false,
  },
});

export const SessionModel = getModelForClass(Session, {
  schemaOptions: {
    collection: "sessions",
    timestamps: { createdAt: "created_at", updatedAt: "updated_at" },
  },
});

export const MessageModel = getModelForClass(Message, {
  schemaOptions: {
    collection: "messages",
    timestamps: { createdAt: "created_at", updatedAt: "updated_at" },
  },
});

export const FaqQuestionModel = getModelForClass(FaqQuestion, {
  schemaOptions: {
    collection: "faq_questions",
    timestamps: { createdAt: "created_at", updatedAt: "updated_at" },
  },
});

export const DocumentModel = getModelForClass(Document, {
  schemaOptions: {
    collection: "documents",
    timestamps: { createdAt: "created_at", updatedAt: "updated_at" },
  },
});

export const DocumentChunkModel = getModelForClass(DocumentChunk, {
  schemaOptions: {
    collection: "document_chunks",
    timestamps: { createdAt: "created_at", updatedAt: "updated_at" },
  },
});

export const LiveInteractionModel = getModelForClass(LiveInteraction, {
  schemaOptions: {
    collection: "live_interactions",
    timestamps: { createdAt: "created_at", updatedAt: "updated_at" },
  },
});
