// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../prisma-generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserProjectRole {
  OWNER
  EDITOR
}

enum MessageRole {
  USER
  ASSISTANT
}

enum ProcessingStatus {
  IN_PROGRESS
  READY
}

enum EntityStatus {
  ACTIVE
  DISABLED
}

model User {
  id         String       @id @default(uuid())
  name       String
  surname    String
  email      String       @unique
  password   String
  status     EntityStatus @default(ACTIVE)
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  // Relations
  user_projects UserProject[]
  sessions      Session[]

  @@map("users")
}

model Project {
  id         String       @id @default(uuid())
  title      String
  logo       String?
  status     EntityStatus @default(ACTIVE)
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  // Relations
  user_projects  UserProject[]
  project_limits ProjectLimit?
  bot            Bot?

  @@map("projects")
}

model UserProject {
  id         String          @id @default(uuid())
  user_id    String
  project_id String
  role       UserProjectRole
  status     EntityStatus    @default(ACTIVE)
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt

  // Relations
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  project Project @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@unique([user_id, project_id])
  @@map("user_projects")
}

model ProjectLimit {
  id                          String   @id @default(uuid())
  project_id                  String   @unique
  remaining_faq_questions     Int
  remaining_documents         Int
  remaining_live_interactions Int
  remaining_users_count       Int
  created_at                  DateTime @default(now())
  updated_at                  DateTime @updatedAt

  // Relations
  project Project @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@map("project_limits")
}

model Bot {
  id         String       @id @default(uuid())
  project_id String       @unique
  status     EntityStatus @default(ACTIVE)
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  // Relations
  project           Project           @relation(fields: [project_id], references: [id], onDelete: Cascade)
  bot_config        BotConfig?
  sessions          Session[]
  faq_questions     FaqQuestion[]
  documents         Document[]
  live_interactions LiveInteraction[]

  @@map("bots")
}

model BotConfig {
  id                 String  @id @default(uuid())
  bot_id             String  @unique
  name               String
  description        String
  welcome_message    String
  personality_prompt String?
  avatar             String?

  // Relations
  bot Bot @relation(fields: [bot_id], references: [id], onDelete: Cascade)

  @@map("bot_configs")
}

model Session {
  id         String       @id @default(uuid())
  user_id    String
  bot_id     String
  status     EntityStatus @default(ACTIVE)
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  // Relations
  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  bot      Bot       @relation(fields: [bot_id], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("sessions")
}

model Message {
  id         String       @id @default(uuid())
  session_id String
  role       MessageRole
  content    String
  is_visible Boolean      @default(true)
  status     EntityStatus @default(ACTIVE)
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  // Relations
  session Session @relation(fields: [session_id], references: [id], onDelete: Cascade)

  @@map("messages")
}

model FaqQuestion {
  id               String           @id @default(uuid())
  bot_id           String
  question         String
  answer           String
  embedding_status ProcessingStatus @default(IN_PROGRESS)
  embedding        Bytes?
  status           EntityStatus     @default(ACTIVE)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  // Relations
  bot Bot @relation(fields: [bot_id], references: [id], onDelete: Cascade)

  @@map("faq_questions")
}

model Document {
  id               String           @id @default(uuid())
  bot_id           String
  title            String
  file_url         String
  embedding_status ProcessingStatus @default(IN_PROGRESS)
  status           EntityStatus     @default(ACTIVE)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  // Relations
  bot             Bot             @relation(fields: [bot_id], references: [id], onDelete: Cascade)
  document_chunks DocumentChunk[]

  @@map("documents")
}

model DocumentChunk {
  id          String       @id @default(uuid())
  document_id String
  chunk_index Int
  chunk_text  String
  embedding   Bytes?
  status      EntityStatus @default(ACTIVE)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  // Relations
  document Document @relation(fields: [document_id], references: [id], onDelete: Cascade)

  @@map("document_chunks")
}

model LiveInteraction {
  id          String       @id @default(uuid())
  bot_id      String
  interaction Json?
  results     Json?
  status      EntityStatus @default(ACTIVE)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  // Relations
  bot Bot @relation(fields: [bot_id], references: [id], onDelete: Cascade)

  @@map("live_interactions")
}
